<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>academic | HOUSE OF ARTIVIS</title>
    <link>https://artivis.github.io/tag/academic/</link>
      <atom:link href="https://artivis.github.io/tag/academic/index.xml" rel="self" type="application/rss+xml" />
    <description>academic</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Jérémie Deray © 2020</copyright><lastBuildDate>Sat, 09 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://artivis.github.io/images/icon_hud2d1771ce140e1d1fd4d0e59d51cebc4_11712_512x512_fill_lanczos_center_2.png</url>
      <title>academic</title>
      <link>https://artivis.github.io/tag/academic/</link>
    </image>
    
    <item>
      <title>My website</title>
      <link>https://artivis.github.io/post/2020/my-website/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      <guid>https://artivis.github.io/post/2020/my-website/</guid>
      <description>&lt;p&gt;Here we are, looking for online visibility.
How does one set that up quickly when starting from scratch?
Do &lt;strong&gt;you&lt;/strong&gt; Remember those HTML courses?&lt;br&gt;
&lt;strong&gt;Yeah me neither.&lt;/strong&gt;&lt;br&gt;
But fortunately for us 
&lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; made it easier than ever!&lt;/p&gt;
&lt;p&gt;We will discuss in this post how to set up the necessary tools to build and view and website locally and then how to deploy it to &lt;code&gt;GitHub&lt;/code&gt;.
The prerequisites are,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;markdown&lt;/li&gt;
&lt;li&gt;LXD (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may find &lt;code&gt;GitHub&lt;/code&gt; tutorials 
&lt;a href=&#34;https://guides.github.com/activities/hello-world/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;
and 
&lt;a href=&#34;https://opensource.com/article/18/1/step-step-guide-git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;there&lt;/a&gt;.
Pages of our website will be written in 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;markdown&lt;/a&gt;.
You can learn more about markdown from those tutorials,

&lt;a href=&#34;http://markdowntutorial.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in English&lt;/a&gt; and 
&lt;a href=&#34;https://openclassrooms.com/courses/redigez-en-markdown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in French&lt;/a&gt;.
And if you only need a brief refresh,

&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; is the syntax supported by our website.
Finally, you can find a &lt;code&gt;LXD&lt;/code&gt; tutorial 
&lt;a href=&#34;https://linuxcontainers.org/lxd/getting-started-cli/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, let us set up the necessary stuff to get started, shall we?&lt;/p&gt;
&lt;h1 id=&#34;picking-a-website-template&#34;&gt;Picking a website template&lt;/h1&gt;
&lt;p&gt;To build our website, we will use the framework 
&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt;.
It is very convenient for our use case because it comes with a ton of

&lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;predefined website themes&lt;/a&gt;
and it is very simple to use.&lt;/p&gt;
&lt;p&gt;For the purpose of this tutorial we will use the very theme of this website,
namely, 
&lt;a href=&#34;https://themes.gohugo.io/academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic&lt;/a&gt;.
This theme is rather clean, well organized and quite simple too.
Unlike other themes that require some extra steps,
&lt;code&gt;Academic&lt;/code&gt; is pretty much clone and play.
Furthermore, it is 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;well documented&lt;/a&gt;!
However, at the time of writing, this theme requires &lt;code&gt;Hugo *Extended*&lt;/code&gt; version 0.67+.
This distinction is important because,
while it is conveniently 
&lt;a href=&#34;https://snapcraft.io/hugo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;packaged as a snap&lt;/a&gt;,
the snap only offers the classic version, not the &lt;em&gt;Extended&lt;/em&gt;.
Therefore we have to fetch its debian package and install it manually.&lt;/p&gt;
&lt;p&gt;First, let us clone the &lt;code&gt;Academic&lt;/code&gt; theme on our machine:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/workspace
cd ~/workspace
git clone https://github.com/sourcethemes/academic-kickstart.git my_website
cd my_website
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;prepping-the-tools&#34;&gt;Prepping the tools&lt;/h1&gt;
&lt;p&gt;To avoid polluting our system, we will set up a Linux container in which we will
install &lt;code&gt;Hugo Extended&lt;/code&gt;.
The container is totally optional and you can do the installation directly on your machine.
If you do not wish to use a container, skip directly to 
&lt;a href=&#34;#installing-hugo&#34;&gt;Hugo installation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;setting-up-the-lxc&#34;&gt;Setting up the LXC&lt;/h2&gt;
&lt;p&gt;Let us start a fresh and pull a new &lt;code&gt;Ubuntu 18.04&lt;/code&gt; instance,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lxc launch ubuntu:18.04 hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will now mount a disk device to share the website source code between our machine and the container:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lxc config device add hugo workspace disk source=~/workspace/my_website path=/home/ubuntu/my_website
lxc config set hugo raw.idmap &amp;quot;both $(id -u) $(id -g)&amp;quot;
lxc restart hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default installation of &lt;code&gt;LXD&lt;/code&gt; set up a bridged network so that containers
live behind a NAT on the host. Therefore, we have to forward the port on which
our website is served by the &lt;code&gt;Hugo&lt;/code&gt; framework.
To do so, issue the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lxc config device add hugo proxy1313 proxy connect=tcp:127.0.0.1:1313 listen=tcp:0.0.0.0:1313
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The container is all set up. We can log to it with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lxc exec hugo -- su --login ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;installing-hugo&#34;&gt;Installing Hugo&lt;/h2&gt;
&lt;p&gt;We will download the &lt;code&gt;Hugo&lt;/code&gt; extended debian directly from it &lt;code&gt;GitHub&lt;/code&gt; repository.
To do so, enter in the terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/gohugoio/hugo/releases/download/v0.70.0/hugo_extended_0.70.0_Linux-64bit.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the time of writing, the latest &lt;code&gt;Hugo Extended&lt;/code&gt; release is version 0.70.0.&lt;/p&gt;
&lt;p&gt;We can now install it with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dpkg -i hugo_extended_*.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;first-view-of-our-website&#34;&gt;First view of our website&lt;/h2&gt;
&lt;p&gt;Let the show begin. We are now ready to spawn our website and browse it.
In a terminal, enter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/ubuntu/my_website
hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voila!&lt;/p&gt;
&lt;p&gt;The website it up and running! To visualize it,
open your web browser at the address &lt;code&gt;http://localhost:1313&lt;/code&gt;.
That was easy right?&lt;/p&gt;
&lt;h1 id=&#34;making-the-website-your-own&#34;&gt;Making the website your own&lt;/h1&gt;
&lt;p&gt;We have a great template up and running, it is now time to make it our own.
The &lt;code&gt;Academic&lt;/code&gt; theme comes with a ton of options and configurations allowing us
to truly personalize it to our liking and use case.
And since it online documentation is so great,
I will let you discovers by yourself all the possibilities the theme offers.
Head down to the 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/get-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic get started documentation&lt;/a&gt;
and have fun!&lt;/p&gt;
&lt;p&gt;Just a quick advice, as you edit your website, let &lt;code&gt;Hugo&lt;/code&gt; run.
It is able to update the website live so that you see your changes take effect
immediately in your web browser!&lt;/p&gt;
&lt;h1 id=&#34;deploying-the-website-to-github&#34;&gt;Deploying the website to GitHub&lt;/h1&gt;
&lt;p&gt;Once our website is ready to be made public, all there is to do is to push it to &lt;code&gt;GitHub&lt;/code&gt;.
In your &lt;code&gt;GitHub&lt;/code&gt; account, we will create a repository to host your website.
To do so hit the tiny cross &lt;code&gt;(+)&lt;/code&gt; in the top-right of &lt;code&gt;GitHub&lt;/code&gt; and select &lt;code&gt;new repository&lt;/code&gt;.
For &lt;code&gt;GitHub&lt;/code&gt; to be able to figure out that this particular repository is your personal website
we need to give it a specific name in the form : &lt;strong&gt;&lt;your-github-user-name&gt;.github.io&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;All we have to do now is to push our website to this repository.&lt;/p&gt;
&lt;p&gt;First we will commit all of our changes,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/ubuntu/my_website
git add .
git commit &#39;made the website my own&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and add the &lt;code&gt;GitHub&lt;/code&gt; repository we just created as our remote,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add remote origin https://github.com/&amp;lt;your-github-user-name&amp;gt;/&amp;lt;your-github-user-name&amp;gt;.github.io.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let us push the changes upstream,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voila!&lt;/p&gt;
&lt;p&gt;Your website is now available at the address&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://&amp;lt;your-github-user-name&amp;gt;.github.io/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Our job here is done.&lt;/p&gt;
&lt;h1 id=&#34;bonus-academic-publications&#34;&gt;Bonus: Academic publications&lt;/h1&gt;
&lt;p&gt;If you happen to have some academic publications that you would like to showcase
on your website, we will install a Python tool called &lt;code&gt;academic&lt;/code&gt;
that will help us to automatically generate pages from &lt;code&gt;Bibtex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First we will install &lt;code&gt;pip3&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install python3-pip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we will install &lt;code&gt;academic&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install -U academic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given that we have a &lt;code&gt;.bib&lt;/code&gt; file that contains all of our publications,
we can generate the pages as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/ubuntu/my_website
academic import --bibtex &amp;lt;path_to_your/publications.bib&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find more information in the

&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-a-publication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic theme documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
