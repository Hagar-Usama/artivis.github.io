<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Raspberry Pi | Home to artivis</title><link>https://artivis.github.io/tag/raspberry-pi/</link><atom:link href="https://artivis.github.io/tag/raspberry-pi/index.xml" rel="self" type="application/rss+xml"/><description>Raspberry Pi</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Jérémie Deray © 2021</copyright><lastBuildDate>Thu, 11 Mar 2021 00:00:00 +0000</lastBuildDate><image><url>https://artivis.github.io/images/icon_hud2d1771ce140e1d1fd4d0e59d51cebc4_11712_512x512_fill_lanczos_center_2.png</url><title>Raspberry Pi</title><link>https://artivis.github.io/tag/raspberry-pi/</link></image><item><title>Getting started with micro-ROS on the Pi Pico</title><link>https://artivis.github.io/post/2021/pi-pico-uros-getting-started/</link><pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate><guid>https://artivis.github.io/post/2021/pi-pico-uros-getting-started/</guid><description>&lt;p>In this post we will see how the Pi Pico can natively speak to a ROS2 graph using micro-ROS.
We will set up a project in VSCode, compile and upload it to the microcontroller.
We thus assume that you are somewhat familiar with
&lt;a href="https://docs.ros.org/en/foxy/index.html" target="_blank" rel="noopener">ROS2 development&lt;/a> and
&lt;a href="https://code.visualstudio.com" target="_blank" rel="noopener">VSCode&lt;/a>.&lt;/p>
&lt;hr>
&lt;h2 id="content">Content&lt;/h2>
&lt;ul>
&lt;li>
&lt;a href="#what-is-this-all-about">What is this all about?&lt;/a>
&lt;ul>
&lt;li>
&lt;a href="#the-raspberry-pi-pico">The Raspberry Pi Pico&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#micro-ros">micro-ROS&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;a href="#getting-started">Getting started&lt;/a>
&lt;ul>
&lt;li>
&lt;a href="#installing-dependencies">Installing dependencies&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#fetching-the-sources">Fetching the sources&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#setting-up-vscode">Setting up VSCode&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;a href="#running-the-example">Running the example&lt;/a>
&lt;ul>
&lt;li>
&lt;a href="#wait-a-minute-what-does-it-do">Wait a minute. What does it do?&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#uploading-to-the-pi-pico">Uploading to the Pi Pico&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#installing-the-micro-ros-agent">Installing the micro-ros-agent&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#actually-running-the-example">Actually running the example&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;a href="#whats-next">What&amp;rsquo;s next?&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="what-is-this-all-about">What is this all about?&lt;/h2>
&lt;h3 id="the-raspberry-pi-pico">The Raspberry Pi Pico&lt;/h3>
&lt;p>The Raspberry Pi Pico,
&lt;a href="https://www.raspberrypi.org/blog/raspberry-pi-silicon-pico-now-on-sale/" target="_blank" rel="noopener">announced in late January 2021&lt;/a>,
is the newest release of the Raspberry Pi Foundation which received a ton of attention (a quick search on Google and/or Youtube will convince you).
And that&amp;rsquo;s for a good reason.
Compared to its well known predecessors,
this new board differs in two major ways:
it is an &lt;em>in-house&lt;/em> designed open-hardware &lt;em>microcontroller&lt;/em>!
Yes, the chip itself is designed by the Pi&amp;rsquo;s engineers and it is fully open-hardware.
And as usually with the Pi foundation,
it is incredibly affordable at just 4$.&lt;/p>
&lt;p>The details concerning the board itself,
the differences between microprocessor and microcontroller,
the 101 getting started or what can the Pi Pico do;
all of that is beyond the scope of this post.
But I strongly encourage you having a look for yourself,
whether you are familiar with microcontrollers or not.&lt;/p>
&lt;h3 id="micro-ros">micro-ROS&lt;/h3>
&lt;p>In the ROS (1) realm, microcontrollers have always been sort of second class citizens.
They can&amp;rsquo;t interact directly with the ROS graph and developers have to rely on libraries such as
&lt;a href="http://wiki.ros.org/rosserial" target="_blank" rel="noopener">rosserial&lt;/a>.
But ROS2 is a whole new world and things are changing.&lt;/p>
&lt;blockquote>
&lt;p>micro-ROS puts ROS 2 onto microcontrollers, making them first class participants of the ROS 2 environment.&lt;/p>
&lt;/blockquote>
&lt;p>The
&lt;a href="https://micro-ros.github.io/" target="_blank" rel="noopener">micro-ROS&lt;/a> project is an effort led by
&lt;a href="https://micro.ros.org/docs/overview/users_and_clients/" target="_blank" rel="noopener">big industrial names&lt;/a> such as Bosch,
eProsima, Fiware Foundation, notably through the
&lt;a href="http://www.ofera.eu/" target="_blank" rel="noopener">OFERA&lt;/a> H2020 project,
and a myriad of partners and collaborators including e.g. Amazon and Canonical.&lt;/p>
&lt;p>So what is it? It is essentially a thin wrapper (see its
&lt;a href="https://micro-ros.github.io/docs/concepts/client_library/decision_paper/" target="_blank" rel="noopener">design document&lt;/a>) on top of &amp;lsquo;DDS for eXtremely Resource Constrained Environments&amp;rsquo; (
&lt;a href="https://www.omg.org/spec/DDS-XRCE/" target="_blank" rel="noopener">DDS-XRCE&lt;/a>),
running on a real-time OS, allowing microcontrollers to &amp;lsquo;speak&amp;rsquo; to a ROS2 graph (the usual talker/listener) using an optimized subset of the DDS protocol.
It relies on a &amp;lsquo;bridged&amp;rsquo; communication architecture with a &amp;lsquo;broker&amp;rsquo; named the
&lt;a href="https://github.com/micro-ROS/micro-ROS-Agent" target="_blank" rel="noopener">&amp;lsquo;micro-ros-agent&amp;rsquo;&lt;/a>.
The agent is in charge of the interfacing between the ROS2 graph and one or several micro-ROS devices.&lt;/p>
&lt;p>More details can be found on the
&lt;a href="https://micro-ros.github.io/" target="_blank" rel="noopener">micro-ROS website&lt;/a> including how it compares/differs from rosserial (see
&lt;a href="https://micro-ros.github.io/docs/overview/comparison/" target="_blank" rel="noopener">here&lt;/a> and
&lt;a href="https://micro.ros.org/docs/concepts/middleware/rosserial/" target="_blank" rel="noopener">here&lt;/a>).&lt;/p>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;p>Alright, so now that we have clarified a couple terms,
let us get started, step by step,
with micro-ROS on Pi Pico with the
&lt;a href="https://github.com/micro-ROS/micro_ros_raspberrypi_pico_sdk" target="_blank" rel="noopener">official example available on github&lt;/a>.
Note that for this tutorial I am running Ubuntu 20.04 with the
&lt;a href="https://snapcraft.io/code" target="_blank" rel="noopener">VSCode snap&lt;/a>.&lt;/p>
&lt;p>If you are not running Ubuntu 20.04 yet, you could consider using a LXD container.
You can refer to my previous post
&lt;a href="https://artivis.github.io/post/2020/lxc/" target="_blank" rel="noopener">&amp;lsquo;ROS Noetic development workflow in LXC&amp;rsquo;&lt;/a> to help you get started setting up the container.&lt;/p>
&lt;h3 id="installing-dependencies">Installing dependencies&lt;/h3>
&lt;p>Let&amp;rsquo;s start simple by installing the couple necessary dependencies,&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo apt install build-essential cmake gcc-arm-none-eabi libnewlib-arm-none-eabi doxygen git python3
&lt;/code>&lt;/pre>
&lt;h3 id="fetching-the-sources">Fetching the sources&lt;/h3>
&lt;p>We will now create a workspace and fetch all the sources,&lt;/p>
&lt;pre>&lt;code class="language-bash">mkdir -p ~/micro_ros_ws/src
cd ~/micro_ros_ws/src
git clone --recurse-submodules https://github.com/raspberrypi/pico-sdk.git
git clone https://github.com/micro-ROS/micro_ros_raspberrypi_pico_sdk.git
&lt;/code>&lt;/pre>
&lt;p>The first repository is the Pi Pico SDK provided by the Pi foundation.
The second contains a precompiled micro-ROS stack together with a hello-world-like example.&lt;/p>
&lt;h3 id="setting-up-vscode">Setting up VSCode&lt;/h3>
&lt;p>Let us now open the example in VSCode and set it up.
To follow along, you will need two VSCode extensions that are rather common for C++ development.
These extensions are the
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools" target="_blank" rel="noopener">C++ extension&lt;/a> and
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools" target="_blank" rel="noopener">CMake tools&lt;/a> for VSCode.
After installing them, we will create a configuration file for CMake tools and set a variable so that our project knows where to find the Pi Pico SDK.
To do so, simply type,&lt;/p>
&lt;pre>&lt;code class="language-bash">cd ~/micro_ros_ws/src/micro_ros_raspberrypi_pico_sdk
mkdir .vscode
touch .vscode/settings.json
&lt;/code>&lt;/pre>
&lt;p>Open the newly created file with your favorite editor,&lt;/p>
&lt;pre>&lt;code class="language-bash">vi .vscode/settings.json
&lt;/code>&lt;/pre>
&lt;p>and add the following,&lt;/p>
&lt;pre>&lt;code class="language-json">{
&amp;quot;cmake.configureEnvironment&amp;quot;: {
&amp;quot;PICO_SDK_PATH&amp;quot;: &amp;quot;/home/artivis/micro_ros_ws/src/pico-sdk&amp;quot;,
},
}
&lt;/code>&lt;/pre>
&lt;p>This variable is an environment variable that is only passed to CMake at configuration time.
See the
&lt;a href="https://vector-of-bool.github.io/docs/vscode-cmake-tools/settings.html?highlight=configureenvironment" target="_blank" rel="noopener">CMake-Tools documentation&lt;/a> for more info.&lt;/p>
&lt;p>Let us now open it,&lt;/p>
&lt;pre>&lt;code class="language-bash">code .
&lt;/code>&lt;/pre>
&lt;p>Before running the CMake configuration and build it,
we must select the appropriate &amp;lsquo;kit&amp;rsquo; (maybe VSCode has already asked you to do so).
Open the palette (ctrl+shift+p) and search for &lt;code>'CMake: Scan for Kits'&lt;/code> and then &lt;code>'CMake: Select a Kit'&lt;/code> and make sure to select the compiler we&amp;rsquo;ve installed above, that is &lt;code>'GCC for arm-non-eabi'&lt;/code>.&lt;/p>
&lt;p>We&amp;rsquo;re all set, let us build the example!
Open the palette again and hit &lt;code>'CMake: Build'&lt;/code>.&lt;/p>
&lt;h2 id="running-the-example">Running the example&lt;/h2>
&lt;h3 id="wait-a-minute-what-does-it-do">Wait a minute. What does it do?&lt;/h3>
&lt;p>Right, let&amp;rsquo;s break down very briefly what the example does.
It sets up a node called &lt;code>'pico_node'&lt;/code>,
then a publisher publishing a &lt;code>'std_msgs/msg/int32.h'&lt;/code> message on topic &lt;code>'pico_publisher'&lt;/code>,
a recurring timer and an executor to orchestrate everything.
Every 0.1 second, the executor spins.
But only every second, the timer will have the publisher publish a message and increase the message data by 1.
Simple. So let&amp;rsquo;s try it out.&lt;/p>
&lt;h3 id="uploading-to-the-pi-pico">Uploading to the Pi Pico&lt;/h3>
&lt;p>If everything went fine during compilation,
you should see a new &lt;code>'build'&lt;/code> folder in your project view.
In this folder, you will find the file that we should now upload to the Pi Pico,
it is named here &lt;code>'pico_micro_ros_example.uf2'&lt;/code>.
To upload it, simply connect the board with a USB cable &lt;strong>while pressing&lt;/strong> the tiny white button labelled &lt;code>'BOOTSEL'&lt;/code>.
Doing so, the Pi Pico will mount similarly to a flash drive allowing us to very easily copy/paste the &amp;lsquo;&lt;code>.uf2&lt;/code>&amp;rsquo; file.&lt;/p>
&lt;p>Head to a terminal and type,&lt;/p>
&lt;pre>&lt;code class="language-bash">cd build
cp pico_micro_ros_example.uf2 /media/$USER/RPI-RP2
&lt;/code>&lt;/pre>
&lt;p>Once the file is copied,
the board will automatically reboot and start executing the example.&lt;/p>
&lt;p>Easy-peasy.&lt;/p>
&lt;h3 id="installing-the-micro-ros-agent">Installing the micro-ros-agent&lt;/h3>
&lt;p>We have seen in the introduction that micro-ROS has a bridged communication architecture.
We thus have to build that bridge.
Well, fortunately the development team has built it already and distributes it both as a
&lt;a href="https://snapcraft.io/micro-ros-agent" target="_blank" rel="noopener">Snap&lt;/a> or a
&lt;a href="https://hub.docker.com/r/microros/micro-ros-agent" target="_blank" rel="noopener">Docker image&lt;/a>.
Here we&amp;rsquo;ll make use of the former.
If you are using Ubuntu 16.04 or later, snap is already pre-installed and ready to go.
If you are running another OS, you can either
&lt;a href="https://snapcraft.io/docs/installing-snap-on-ubuntu" target="_blank" rel="noopener">install snap&lt;/a> or make use of the Docker image.&lt;/p>
&lt;p>To install the micro-ros-agent snap, type,&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo snap install micro-ros-agent
&lt;/code>&lt;/pre>
&lt;p>After installing it, and because we are using a serial connection,
we need to configure a couple things.
First we need to enable the &lt;code>'hotplug'&lt;/code> feature,&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo snap set core experimental.hotplug=true
&lt;/code>&lt;/pre>
&lt;p>and restart the snap demon so that it takes effect,&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo systemctl restart snapd
&lt;/code>&lt;/pre>
&lt;p>After making sure the Pi Pico is plugged, execute,&lt;/p>
&lt;pre>&lt;code class="language-bash">$ snap interface serial-port
name: serial-port
summary: allows accessing a specific serial port
plugs:
- micro-ros-agent
slots:
- snapd:pico (allows accessing a specific serial port)
&lt;/code>&lt;/pre>
&lt;p>What we see here is that the micro-ros-agent snap has a serial &amp;lsquo;&lt;code>plug&lt;/code>&amp;rsquo; while a &amp;lsquo;&lt;code>pico&lt;/code>&amp;rsquo; &lt;code>'slot'&lt;/code> magically appeared.
As per the semantic, we probably should connect them together. To do so run,&lt;/p>
&lt;pre>&lt;code class="language-bash">snap connect micro-ros-agent:serial-port snapd:pico
&lt;/code>&lt;/pre>
&lt;p>We are now all set to finally run our example.&lt;/p>
&lt;h3 id="actually-running-the-example">Actually running the example&lt;/h3>
&lt;p>With the Pi Pico plugged through USB,
we will start the micro-ros-agent as follows,&lt;/p>
&lt;pre>&lt;code class="language-bash">micro-ros-agent serial --dev /dev/ttyACM0 baudrate=115200
&lt;/code>&lt;/pre>
&lt;p>and wait a couple seconds for the Pi Pico&amp;rsquo;s LED to light up indicating that the main loop is running.
In case it does not light up after a few long seconds (count up to 10 mississippi),
you may want to unplug/replug the board in order to reboot it.
The initialization procedure of the example lacks a few error checking.
Hey, could fixing that be &lt;strong>your&lt;/strong> first project?&lt;/p>
&lt;p>So now the LED should shine a bright green.
That&amp;rsquo;s cool.
Do you know what&amp;rsquo;s cooler?
Running on your host machine,&lt;/p>
&lt;pre>&lt;code class="language-bash">$ source /opt/ros/dashing/setup.bash
$ ros2 topic echo /pico_publisher
data: 41
---
data: 42
---
&lt;/code>&lt;/pre>
&lt;p>Awesome!&lt;/p>
&lt;p>And hitting a&lt;/p>
&lt;pre>&lt;code class="language-bash">$ ros2 node list
/pico_node
&lt;/code>&lt;/pre>
&lt;p>proves that the micro-ROS node running on the Pi Pico is visible to ROS2 on the host machine.&lt;/p>
&lt;p>Yatta!&lt;/p>
&lt;h2 id="whats-next">What&amp;rsquo;s next?&lt;/h2>
&lt;p>For a long time it wasn&amp;rsquo;t convenient to mix microcontrollers and ROS.
But this is about to seriously change as we&amp;rsquo;ve just seen.
No doubt that both micro-ROS and the Pi Pico will bolster great robotics applications (and more!).&lt;/p>
&lt;p>In this tutorial we&amp;rsquo;ve reached a great starting point with a ROS2-based project ready to spin on the suppa-cool suppa-affordable Pi Pico.&lt;/p>
&lt;p>Of course this wouldn&amp;rsquo;t have been possible without the micro-ROS dev team and Cyberbotics engineer Darko Lukić (
&lt;a href="https://github.com/lukicdarkoo" target="_blank" rel="noopener">@lukicdarkoo&lt;/a>) who has put together the initial example we&amp;rsquo;ve just used.
As often, there are super smart people out there making complicated stuff very accessible,
shout out to them.&lt;/p>
&lt;p>I&amp;rsquo;m personally going to keep playing with micro-ROS on Pi Pico,
first because it is fun and second because I have a couple ideas up my sleeves.
Be sure that if they become reality you&amp;rsquo;ll hear about them on this blog.&lt;/p>
&lt;p>What about you? Do you have some cool projects already in mind?&lt;/p>
&lt;!-- uROS main links --></description></item><item><title>Downloading Raspberry Pi Press issues</title><link>https://artivis.github.io/post/2020/rpipress/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://artivis.github.io/post/2020/rpipress/</guid><description>&lt;p>In this post we will discover the great magazines edited under the
Raspberry Pi Press umbrella and discuss how to easily access them all.&lt;/p>
&lt;hr>
&lt;h1 id="content">Content&lt;/h1>
&lt;ul>
&lt;li>
&lt;a href="#the-raspberry-pi-press-magazines">The Raspberry Pi Press magazines&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#bookshelf">Bookshelf&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#rpipress-downloader">rpipress-downloader&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="the-raspberry-pi-press-magazines">The Raspberry Pi Press magazines&lt;/h1>
&lt;p>The
&lt;a href="https://store.rpipress.cc/" target="_blank" rel="noopener">Raspberry Pi Press&lt;/a> is a part of the Raspberry Pi Foundation
and the publisher of a great deal of magazines and books.
Among the many magazines edited, some are freely available for download,&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://hackspace.raspberrypi.org/" target="_blank" rel="noopener">HackSpace&lt;/a> is a monthly publication dedicated to those who love to make things
and learn while doing it.&lt;/li>
&lt;li>
&lt;a href="https://helloworld.raspberrypi.org/" target="_blank" rel="noopener">HelloWorld&lt;/a> is published three times a year and targets educators
of the computing and digital world.&lt;/li>
&lt;li>
&lt;a href="https://magpi.raspberrypi.org/" target="_blank" rel="noopener">MagPi&lt;/a> is the official magazine of the Raspberry Pi and is loaded
with stories and project based on the single board computer.
Published every month, the latest issue is numbered N°95 as of the time of writing,
making it an incredible source of inspiration.&lt;/li>
&lt;li>
&lt;a href="https://wireframe.raspberrypi.org/" target="_blank" rel="noopener">Wiredframe&lt;/a> is published every 2 weeks and is entirely dedicated
to video games. But unlike other video game magazines, it offers
to look at how they are made, who make them and offer a lot of resources
to get started writing your own games.&lt;/li>
&lt;/ul>
&lt;p>On top of that, The Raspberry Pi Press also publishes many great books.&lt;/p>
&lt;p>Each magazine can be bought online and shipped around the globe.
One can also sign for a yearly subscription, offering some
discount and/or goodies. At the same time, issues are freely available
to download in pdf from the magazine websites.&lt;/p>
&lt;h1 id="bookshelf">Bookshelf&lt;/h1>
&lt;p>Recently the
&lt;a href="https://www.raspberrypi.org/blog/latest-raspberry-pi-os-update-may-2020/" target="_blank" rel="noopener">Raspberry Pi Foundation presented the Raspberry Pi OS&lt;/a>,
a rebranding of Raspbian, highlighting some of its novelties.
Among those novelties, they showcased a neat little app named &lt;code>Bookshelf&lt;/code>
that allows you to browse and download the issues of
several magazines edited by the Raspberry Pi Press.&lt;/p>
&lt;p>The application is a simple interface listing all issues of each magazine
but also some of the books.
It allows for simply downloading any issue by simply clicking on
the desired cover.&lt;/p>
&lt;p>&lt;img src="https://artivis.github.io/img/post/bookshelf.png" alt="The Bookshelf app">&lt;/p>
&lt;p>Unfortunately this great app is only available through the Pi OS
archive and its
&lt;a href="https://www.raspberrypi.org/forums/viewtopic.php?f=63&amp;amp;t=278584&amp;amp;p=1687369&amp;amp;hilit=bookshelf#p1687369" target="_blank" rel="noopener">source code is not public&lt;/a> at the time of writing.
One can still download the deb package and install it manually.
To do so, visit the
&lt;a href="http://archive.raspberrypi.org/debian/pool/main/r/rp-bookshelf/" target="_blank" rel="noopener">app archive&lt;/a> and look for the latest
version of the debian package for your machine architecture.
At the moment it is &lt;code>rp-bookshelf_0.4_amd64.deb&lt;/code> for common computers.
From there, we can simply download the debian and install it,&lt;/p>
&lt;pre>&lt;code class="language-bash">$ wget http://archive.raspberrypi.org/debian/pool/main/r/rp-bookshelf/rp-bookshelf_0.4_amd64.deb
$ dpkg -i rp-bookshelf_0.4_amd64.deb
&lt;/code>&lt;/pre>
&lt;p>To launch the app simply type,&lt;/p>
&lt;pre>&lt;code class="language-bash">$ rp-bookshelf
&lt;/code>&lt;/pre>
&lt;p>Altho this procedure works fine, it is a little unpleasant.
Furthermore, I personally don&amp;rsquo;t care much about the GUI and I&amp;rsquo;d rather prefer
to automatically download the latest issues I care for.
If you feel the same, keep on reading.&lt;/p>
&lt;h1 id="rpipress-downloader">rpipress-downloader&lt;/h1>
&lt;p>The Raspberry Pi Press Store was
&lt;a href="https://www.raspberrypi.org/blog/the-raspberry-pi-press-store-is-looking-mighty-fine/" target="_blank" rel="noopener">recently entirely redesigned&lt;/a>
bringing some uniformization across all the magazine websites.
That allows us to write a small web scrapping script to automatically
download the latest (or all) issues and books of our favorite magazine(s).&lt;/p>
&lt;p>So I went ahead and did just that, writing a small Python script that you can find
on
&lt;a href="https://github.com/artivis/rpipress-downloader" target="_blank" rel="noopener">Github&lt;/a>, or conveniently install as a Snap as follows,&lt;/p>
&lt;pre>&lt;code class="language-bash">sudo snap install rpipress-downloader
&lt;/code>&lt;/pre>
&lt;p>Its use it pretty simple, launch the script in a terminal
and by default it will automatically search and download the latest issue of all
aforementioned magazines.&lt;/p>
&lt;p>Further options let you:&lt;/p>
&lt;ul>
&lt;li>specify which magazine to download
&lt;pre>&lt;code class="language-bash">rpipress-downloader --magazines magpi hackspace
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>download &lt;strong>all&lt;/strong> issues,
&lt;pre>&lt;code class="language-bash">rpipress-downloader --all
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>download the books too,
&lt;pre>&lt;code class="language-bash">rpipress-downloader --books
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>combine options so that,
&lt;pre>&lt;code class="language-bash">rpipress-downloader -a -m magpi -b
&lt;/code>&lt;/pre>
&lt;p>will download all MagPi issues and books.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Issues and books are saved respectively in&lt;/p>
&lt;ul>
&lt;li>&lt;code>~/rpipress/{magazine}&lt;/code>&lt;/li>
&lt;li>&lt;code>~/rpipress/{magazine}/Books&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>or, using the snap, in&lt;/p>
&lt;ul>
&lt;li>&lt;code>~/snap/rpipress-downloader/current/rpipress/{magazine}&lt;/code>&lt;/li>
&lt;li>&lt;code>~/snap/rpipress-downloader/current/rpipress/{magazine}/Books&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Note that the script conveniently let you know the path by printing an
hyperlink in the console,&lt;/p>
&lt;pre>&lt;code class="language-bash">$ rpipress-downloader -m magpi
Latest MagPi issue is N°95
You are up to date
Your favorite magazines are waiting for you in file:///home/artivis/snap/rpipress-downloader/5/rpipress
&lt;/code>&lt;/pre>
&lt;p>Please refer to the
&lt;a href="https://github.com/artivis/rpipress-downloader" target="_blank" rel="noopener">rpipress-downloader&lt;/a> readme page
for further information.&lt;/p>
&lt;p>Have a good reading!&lt;/p></description></item><item><title>SSH the Raspberry Pi Zero over USB</title><link>https://artivis.github.io/post/2020/pi-zero/</link><pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate><guid>https://artivis.github.io/post/2020/pi-zero/</guid><description>&lt;p>In this post, we will see how to SSH a Raspberry Pi Zero
over USB from a Ubuntu-based host.
Moreover we will make sure the the Pi Zero has access to internet through the host
so that we can install/update some software.&lt;/p>
&lt;h1 id="content">Content&lt;/h1>
&lt;ul>
&lt;li>
&lt;a href="#install-raspbian">Install Raspbian&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#ssh-over-usb">SSH over USB&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#set-usb-gadget-mode">Set USB Gadget mode&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#set-the-connection-to-shared-with-other-computers">Set the connection to &amp;lsquo;Shared with other computers&amp;rsquo;&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#set-a-static-mac-address">Set a static MAC address&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#set-a-static-ip-address">Set a static IP address&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="install-raspbian">Install Raspbian&lt;/h1>
&lt;p>There exists plenty of tutorials on the topic of installing Raspbian
(see the the
&lt;a href="https://www.raspberrypi.org/documentation/installation/installing-images/" target="_blank" rel="noopener">official documentation&lt;/a>)
therefore I will not detail it here.
To summarize, you have to,&lt;/p>
&lt;ol>
&lt;li>Download
&lt;a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">&lt;code>Raspian&lt;/code>&lt;/a> (Lite for headless)&lt;/li>
&lt;li>Burn the image on a micro SD card with
&lt;a href="https://www.balena.io/etcher/" target="_blank" rel="noopener">&lt;code>Etcher&lt;/code>&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Before unplugging the card we will enable SSH connections.
To do so, open the &lt;code>boot&lt;/code> partition on the card and simply create
an empty &lt;code>ssh&lt;/code> file:&lt;/p>
&lt;pre>&lt;code class="language-bash">$ cd /path/to/root/
$ touch ssh
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>Plug the card on the Pi Zero&lt;/li>
&lt;/ol>
&lt;h1 id="ssh-over-usb">SSH over USB&lt;/h1>
&lt;p>With the micro SD card ready we can now plug the USB cable to our host
and Pi Zero.
However, note that while the Pi Zero has two micro USB port,
only one supports USB On-The-Go (OTG). It is this feature that
will allows us to treat the connection as an Ethernet connection.
The port in question is the &lt;strong>innermost&lt;/strong> one,
the one closer to the center of the board, as shown in the image below.&lt;/p>
&lt;p>&lt;img src="https://artivis.github.io/img/post/pizero-usb-host.png" alt="Raspberry Pi Zero USB OTG port">&lt;/p>
&lt;h2 id="set-usb-gadget-mode">Set USB Gadget mode&lt;/h2>
&lt;p>We would like to be able to access the Pi Zero through SSH
from our machine using a USB cable.
To do that we will have to edit two files.&lt;/p>
&lt;p>First, edit the file &lt;code>/boot/config.txt&lt;/code> and append this line at the end:&lt;/p>
&lt;pre>&lt;code class="language-terminal">dtoverlay=dwc2
&lt;/code>&lt;/pre>
&lt;p>Second, we will edit the file &lt;code>/boot/cmdline.txt&lt;/code>.
After &lt;code>rootwait&lt;/code>, we will add&lt;/p>
&lt;pre>&lt;code class="language-terminal">modules-load=dwc2,g_ether
&lt;/code>&lt;/pre>
&lt;p>⚠ pay attention to leave only one space between &lt;code>rootwait&lt;/code>
and the new text otherwise it might not be parsed correctly.&lt;br>
⚠ Note that there might already be some text after &lt;code>rootwait&lt;/code>
in which case you still must add the following immediately after &lt;code>rootwait&lt;/code>!
Again, leave a single space after &lt;code>rootwait&lt;/code> but also after &lt;code>g_ether&lt;/code>.&lt;/p>
&lt;p>The Pi Zero is fully configured, we can now configure our host.&lt;/p>
&lt;h2 id="set-the-connection-to-shared-with-other-computers">Set the connection to Shared with other computers&lt;/h2>
&lt;p>On your Linux host, go to the network connections editor.
In the &amp;lsquo;&lt;em>IPv4 Settings&lt;/em>&amp;rsquo; tab,
set &amp;lsquo;&lt;em>Method&lt;/em>:&amp;rsquo; to &amp;lsquo;&lt;em>Shared with other computers&lt;/em>'.
Refresh the connection (dis/connect), after what
you should be able to SSH to the Pi Zero.&lt;/p>
&lt;p>To SSH to the Pi Zero, open a terminal on your host and type:&lt;/p>
&lt;pre>&lt;code class="language-terminal">$ ssh pi@rasberrypi.local
&lt;/code>&lt;/pre>
&lt;p>You will be prompted for a password, use the
&lt;a href="https://www.raspberrypi.org/documentation/linux/usage/users.md" target="_blank" rel="noopener">default one for user &amp;lsquo;pi&amp;rsquo;&lt;/a>.
And do not forget to change it down the line!&lt;/p>
&lt;p>We are now connected on our board, let&amp;rsquo;s try internet out.
Since we are using the method &amp;lsquo;&lt;em>Shared with other computers&lt;/em>&amp;rsquo;
we should be able to access internet:&lt;/p>
&lt;pre>&lt;code class="language-terminal">$ ping -c 3 www.google.com
PING www.google.com (172.217.13.100) 56(84) bytes of data.
64 bytes from yul02s04-in-f4.1e100.net (172.217.13.100): icmp_seq=1 ttl=57 time=10.7 ms
64 bytes from yul02s04-in-f4.1e100.net (172.217.13.100): icmp_seq=2 ttl=57 time=9.60 ms
64 bytes from yul02s04-in-f4.1e100.net (172.217.13.100): icmp_seq=3 ttl=57 time=10.4 ms
--- www.google.com ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2001ms
rtt min/avg/max/mdev = 9.609/10.276/10.783/0.499 ms
&lt;/code>&lt;/pre>
&lt;p>We are live!&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: On some distro, the &amp;lsquo;&lt;em>Shared with other computers&lt;/em>&amp;rsquo; is
not available from the default settings.
In this case fire up &lt;code>nm-connection-editor&lt;/code> from a terminal instead
of the network connections editor.&lt;/p>
&lt;h2 id="set-a-static-mac-address">Set a static MAC address&lt;/h2>
&lt;p>Because we are connecting our Pi Zero as an Ethernet device through
USB OTG, each time the connection is established the board is issued
with a new random MAC address. This can be quickly annoying if we rely
on the MAC address for, e.g. assigning a static IP to our board directly
in our router configurations.
This set up it totally &lt;strong>optional&lt;/strong>.&lt;/p>
&lt;p>In the &lt;code>boot&lt;/code> partition, edit the file &lt;code>cmdline.txt&lt;/code> and append at the end,&lt;/p>
&lt;pre>&lt;code class="language-terminal">g_ether.host_addr=aa:bb:cc:dd:ee:ff
&lt;/code>&lt;/pre>
&lt;p>where &lt;code>aa:bb:cc:dd:ee:ff&lt;/code> will be the static MAC address.
We can use for instance the last mac address assigned to the board.
To retrieve it, run &lt;code>ifconfig&lt;/code> on the host machine and look for a
connection along the lines &lt;code>enp0s29xxxxx&lt;/code>.&lt;/p>
&lt;h2 id="set-a-static-ip-address">Set a static IP address&lt;/h2>
&lt;p>We can also choose to assign a static IP address to our board so that we don&amp;rsquo;t
have to look for it every now and then.
To set a static IP address, edit the file &lt;code>/etc/dhcpcd.conf&lt;/code> as follows,&lt;/p>
&lt;pre>&lt;code class="language-terminal">interface usb0
static ip_address=10.42.0.42
static routers=10.42.0.1
&lt;/code>&lt;/pre>
&lt;p>Where &lt;code>10.42.0.42&lt;/code> is your desired static IP address.&lt;/p>
&lt;p>Reboot and have fun!&lt;/p></description></item></channel></rss>